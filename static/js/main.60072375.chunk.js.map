{"version":3,"sources":["tap.js","App.js","serviceWorker.js","index.js"],"names":["ReactRouterTap","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","sendPageView","bind","assertThisInitialized","initialize","id","location","history","listen","console","error","window","Taplytics","trackPathnameOnly","pathname","lastPathname","page","basename","concat","debug","info","children","React","Component","defaultProps","withRouter","About","react_default","a","createElement","className","featureFlagEnabled","alt","src","App","react_router_dom","tap","to","react_router","path","exact","component","Boolean","hostname","match","init","propertiesLoaded","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.60072375.chunk.js","sourcesContent":["import React from 'react'\nimport { withRouter } from 'react-router-dom'\n\nclass ReactRouterTap extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.sendPageView = this.sendPageView.bind(this)\n    this.initialize = this.initialize.bind(this)\n\n    this.initialize(props.id)\n  }\n\n  componentDidMount() {\n    this.sendPageView(this.props.location)\n    this.props.history.listen(this.sendPageView)\n  }\n\n  initialize() {\n    if (!this.props.id) {\n      console.error('[taplytics] Tracking ID is required.')\n      return\n    }\n  }\n\n  sendPageView(location) {\n    // Do nothing if GA was not initialized due to a missing tracking ID.\n    if (!window.Taplytics) {\n      return\n    }\n\n    // Do nothing if trackPathnameOnly is enabled and the pathname didn't change.\n    if (\n      this.props.trackPathnameOnly &&\n      location.pathname === this.lastPathname\n    ) {\n      return\n    }\n\n    this.lastPathname = location.pathname\n\n    // Sets the page value on the tracker. If a basename is provided, then it is prepended to the pathname.\n    const page = this.props.basename\n      ? `${this.props.basename}${location.pathname}`\n      : location.pathname\n\n    if (this.props.debug) {\n      console.info(`[taplytics] Page view: ${page}`)\n    }\n  }\n\n  render() {\n    return this.props.children\n  }\n}\n\nReactRouterTap.defaultProps = {\n  debug: false,\n}\n\nexport default withRouter(ReactRouterTap)\n","import React from 'react'\nimport './App.css'\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\nimport { Link } from 'react-router-dom'\nimport ReactRouterTap from './tap'\nimport Taplytics from '@taplytics/js-sdk';\n\nconst About = () => {\n  return (\n    <div>\n      <h1 className=\"header\">About</h1>\n      {Taplytics && Taplytics.featureFlagEnabled('showKitten') ? (\n        <img alt=\"\" src=\"//placekitten.com/250/300\" />\n      ) : (\n        <img alt=\"\" src=\"//placebear.com/250/300\" />\n      )}\n      <p>\n        Orci varius natoque penatibus et magnis dis parturient montes, nascetur\n        ridiculus mus. Sed sagittis aliquam libero. Aenean eu vehicula nisi.\n        Phasellus ut enim ac quam tempus lobortis non tristique ante.\n        Suspendisse eget lobortis leo. Sed nec ante ac metus blandit dapibus non\n        ut massa. Curabitur in nibh fermentum, lobortis ligula non, laoreet\n        ante. Fusce varius varius velit, fringilla dapibus diam finibus quis.\n        Pellentesque eget finibus nunc. Curabitur mattis efficitur posuere. Cras\n        sed venenatis lorem. Curabitur vestibulum molestie elit eget dignissim.\n        Mauris dapibus volutpat massa quis euismod. In hac habitasse platea\n        dictumst. Integer iaculis leo neque, in tristique nisi iaculis ut.\n      </p>\n    </div>\n  )\n}\n\nfunction App() {\n  return (\n    <Router basename={process.env.NODE_ENV === 'production' ? '/tap-spa' : '/'}>\n      <ReactRouterTap id=\"UA-123456789-0\">\n        <div>\n          <nav>\n            <ul>\n              <li>\n                <Link to=\"/\">Home</Link>\n              </li>\n              <li>\n                <Link to=\"/about/\">About</Link>\n              </li>\n              <li>\n                <Link to=\"/users/\">Users</Link>\n              </li>\n            </ul>\n          </nav>\n          <Route\n            path=\"/\"\n            exact\n            component={() => (\n              <div>\n                <h1>Home</h1>\n                {Taplytics && Taplytics.featureFlagEnabled('showKitten') ? (\n                  <img\n                    alt=\"\"\n                    src=\"//via.placeholder.com/468x468/0000FF/FFFFFF?text=From+Feature+Flag\"\n                  />\n                ) : (\n                  <img alt=\"\" src=\"//placebear.com/200/300\" />\n                )}\n                <p>\n                  Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n                  Curabitur lorem risus, porta sed neque quis, egestas pharetra\n                  nisl. Proin scelerisque massa et magna vulputate laoreet.\n                  Praesent tempus consectetur venenatis. Cras tristique nisi sit\n                  amet ex pretium, eu semper quam mollis. Vestibulum nisl nunc,\n                  vulputate vitae eros a, mollis blandit tellus. Fusce augue\n                  ipsum, rhoncus id magna eu, laoreet pretium arcu. Phasellus\n                  ornare ut elit ut malesuada. In ac neque ut diam suscipit\n                  rhoncus. Pellentesque hendrerit nisi justo, eu iaculis massa\n                  ultricies eu. Integer feugiat congue ipsum quis elementum.\n                  Vestibulum ante ipsum primis in faucibus orci luctus et\n                  ultrices posuere cubilia Curae; Donec a rhoncus neque.\n                </p>\n              </div>\n            )}\n          />\n          <Route path=\"/about/\" component={About} />\n          <Route\n            path=\"/users/\"\n            component={() => (\n              <div>\n                <h1>Users</h1>\n                {Taplytics && Taplytics.featureFlagEnabled('showKitten') ? (\n                  <img alt=\"\" src=\"//placekitten.com/150/300\" />\n                ) : (\n                  <img alt=\"\" src=\"//placebear.com/150/300\" />\n                )}\n                <p>\n                  Donec a enim quam. Mauris id ex molestie, eleifend nulla ac,\n                  eleifend diam. Fusce quis ipsum ut ante rhoncus tincidunt non\n                  in mi. Cras pulvinar velit id sollicitudin sollicitudin.\n                  Integer interdum turpis nisl, non posuere massa malesuada\n                  quis. Nam et aliquam odio. Integer vehicula consequat\n                  dignissim. Nam iaculis dictum lacus, sit amet facilisis diam\n                  posuere at. Fusce interdum tristique leo sit amet interdum.\n                  Etiam eget sem neque. In sem nibh, dapibus sed posuere a,\n                  laoreet eget nisl. Donec quis facilisis nisl. Nulla malesuada,\n                  neque in semper blandit, nulla velit dictum neque, nec\n                  molestie nunc sapien sit amet justo.\n                </p>\n              </div>\n            )}\n          />\n        </div>\n      </ReactRouterTap>\n    </Router>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Taplytics from '@taplytics/js-sdk';\n\nTaplytics.init(\"fd1e0c78e8c041798002726a30d9d4ff\");\n\nTaplytics.propertiesLoaded(function() {\n  ReactDOM.render(<App />, document.getElementById('root'));\n});\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}